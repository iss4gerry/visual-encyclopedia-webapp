<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <style>

        @media (min-width: 601px) {
            #imagePreview {
                width: auto;
                height: 300px;
            }
        }

        @media (max-width: 600px) {
            .paper {
                padding: 10px;
            }

            .paper h1 {
                font-size: 50px;
            }

            .paper h2 {
                font-size: 40px;
            }

            input[type="file"] {
                width: 100%;
                height: auto;
                font-size: 20px;
            }

            #imagePreview {
                margin: auto;
            }

            button {
                width: 100%;
                padding: 10px;
            }

            .footer .row p {
                margin-bottom: 10px;
            }

            .darkSwitch {
            margin-left: 50px;
            }


        }
    </style>
    <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
    />
    <link
      rel="stylesheet"
      href="https://unpkg.com/papercss@1.9.2/dist/paper.min.css"
    />
    <title>VueJS Basic</title>
  </head>
  <body> 
    <div id="app">
        <div class="paper container">

            <navbar></navbar>
            <fieldset class="row flex-right form-group">
                <label for="paperSwitch7" class="paper-switch-label">
                  Dark Mode
                </label>
                <label class="paper-switch">
                  <input id="paperSwitch7" name="paperSwitch7" type="checkbox" v-model="darkMode"/>
                  <span class="paper-switch-slider round"></span>
                </label>
              </fieldset>
            <h1 class="title text-center margin-top animate__animated animate__swing" :class="">Visual Encyclopedia</h1>
            <form-section @information-result="changeInformationResult" @loading-status="changeLoadingStatus" @show-result="changeResultStatus"></form-section>
            <img style="width: 300px;margin: auto;"
                class="no-border animate__animated animate__bounce" 
                :src=imgSrc
                v-if="loading">
                <h3 class="text-center animate__animated animate__bounce animate__repeat-3" v-if="errorStatus">Error, please try again!</h3>
            <result-section :information="information" :history="history" v-if="showResult" class="animate__animated animate__fadeInUp"></result-sectio>
        </div>    
        <div class="footer paper container margin-top padding-none">
            <p class="text-center animate__animated animate__swing">
                Made With ❤️ by <a href="https://github.com/iss4gerry" target="_blank">Gerry</a>
            </p>
        </div>
    </div>

    
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    
    <script>

        Vue.component('navbar', {
            template: `
                
            `
        })

        Vue.component('form-section', {
            template: `
            <div class="paper container-lg col animate__animated animate__swing">
            <h2 id="uploadImg" class="upload margin-small">upload an image</h2>
            <form enctype="multipart/form-data">
            <div class="form-group">
                <input type="file" accept="image/*" @change="onFileChange">
            </div>
            <div id="imagePreviewContainer" class="margin-bottom" v-if="imageFile">
                <img id="imagePreview" 
                :src="imageUrl" 
                alt="Image Preview" 
                style="width: auto; height: 300px; object-fit: cover;">
            </div>
            <div class="form-group">
            <label for="paperSelects1">Choose Language</label>
            <select v-model="selectedLanguage" id="paperSelects1">
                <option value="bahasa inggris">English</option>
                <option value="bahasa indonesia">Indonesian</option>
            </select>
            </div>
            <button @click.stop="analyzeImage" href="resultSection">Analyze</button>
            </form>
    </div>
            `,
            data: function () {
                return {
                    imageFile: null,
                    imageUrl: null,
                    information: null,
                    history: null,
                    loading: false,
                    showResult: false,
                    selectedLanguage: 'bahasa inggris'
                }
            },
            methods: {
                onFileChange(e) {
                    const file = e.target.files[0]
                    if(file) {
                        this.imageFile = file
                        this.imageUrl = URL.createObjectURL(file)
                    }else {
                        this.imageFile = null
                        this.imageUrl = null
                    }
                },
                fileToBase64(file) {
                    return new Promise((resolve, reject) => {
                    const reader = new FileReader()
                    reader.onloadend = () => resolve(reader.result.split(',')[1])
                    reader.onerror = reject
                    reader.readAsDataURL(file)
                })
                },
                async analyzeImage(event) {
                    event.preventDefault()
                    this.$emit('show-result', this.showResult = false)
                    const imageBase64 = await this.fileToBase64(this.imageFile) 
                    if(!imageBase64) return
                    this.loading = true
                    this.$emit('loading-status', this.loading)
                    const data = {
                        base64Image: imageBase64,
                        language: this.selectedLanguage
                    }
                    const response = await fetch('/analyze', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data) 
                    })

                    const responseData = await response.json()
                    if(responseData.message.includes('Error')){
                        this.$emit('loading-status', 'error')
                        return
                    }
                    const result = responseData.data
                    this.information = result.information
                    this.loading = false
                    this.$emit('loading-status', this.loading)
                    this.history = result.history
                    this.$emit('information-result', this.information, this.history)
                    this.$emit('show-result', this.showResult = true)
                },
            },
        }
    )

        Vue.component('result-section', {
            props: ['information', 'history'],
            template: `
            <div class="paper col">
            <h2 class="text-center margin-small">Result</h2>
            <div class="row flex-spaces tabs">
                <input id="tab1" type="radio" name="tabs" checked>
                <label for="tab1">Information</label>

                <input id="tab2" type="radio" name="tabs">
                <label for="tab2">History</label>
                <div class="content" id="content1">
                <p>
                    {{ information }}
                </p>
            </div>
            <div class="content" id="content2">
                <p>
                    {{ history }}
                </p>
            </div>
            </div>
            </div>
            `,
        })

        var app = new Vue({
            el:'#app',
            data: {
                information: '',
                history: '',
                loading:false,
                showResult: false,
                errorStatus:false,
                darkMode:false,
                imgSrc: 'https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZ3Y4aHNhNWl1YTFibHY1N254a2JoNmQzbmtqNTB0aHMyOHNzcG00bSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/ibWGYUw1hF4Q8gMOhi/giphy.webp'
            },
            methods: {
                changeInformationResult(information, history) {
                    this.information = information
                    this.history = history
                },
                changeLoadingStatus(status) {
                    if(status === 'error'){
                        this.imgSrc = ''
                        this.errorStatus = true
                        return 
                    }
                    this.errorStatus = false
                    this.imgSrc = 'https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZ3Y4aHNhNWl1YTFibHY1N254a2JoNmQzbmtqNTB0aHMyOHNzcG00bSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/ibWGYUw1hF4Q8gMOhi/giphy.webp'
                    this.loading = status
                },
                changeResultStatus(status) {
                    this.showResult = status
                }
            },
            watch: {
                darkMode(newValue) {
                    if(newValue) {
                        document.documentElement.classList.add('dark');
                    }else{
                        document.documentElement.classList.remove('dark');
                    }
                }
            }
        })
    </script>
  </body>
</html>
